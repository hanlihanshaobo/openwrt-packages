name: Sync Subtrees

on:
  workflow_dispatch:
  schedule:
    - cron: '20 * * * *'

env:
  PROJECT_CONFIG_URL: https://raw.githubusercontent.com/hanlihanshaobo/openwrt-packages/main/projects.json

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT }}

      - name: Setup Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Download project config JSON
        run: curl -sSL "$PROJECT_CONFIG_URL" -o projects.json

      - name: Parse and Sync Projects
        run: |
          changes=0
          jq -c '.[]' projects.json | while read -r project; do
            name=$(echo "$project" | jq -r '.name')
            repo=$(echo "$project" | jq -r '.repo')
            branch=$(echo "$project" | jq -r '.branch // "master"')
            enabled=$(echo "$project" | jq -r '.enabled')

            echo "📦 项目: $name | 分支: $branch | 启用: $enabled"

            if [[ "$enabled" == "true" ]]; then
              if [ -d "$name" ]; then
                echo "🔄 更新 $name"
                git subtree pull --prefix="$name" "$repo" "$branch" --squash || echo "⚠️ 无变更或拉取失败"
              else
                echo "➕ 添加 $name"
                git subtree add --prefix="$name" "$repo" "$branch" --squash || echo "❌ 添加失败，可能分支不存在"
              fi
              changes=1
            else
              if [ -d "$name" ]; then
                echo "🗑️ 删除未启用的目录 $name"
                git rm -rf "$name" || echo "⚠️ 删除失败"
                git commit -m "Remove $name (disabled in config)"
                changes=1
              fi
            fi
          done

      - name: Show working directory contents
        run: tree -L 2 || ls -R

      - name: Show git status & diff
        run: |
          git status
          git diff --stat || true

      - name: Commit changes if needed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Sync subtrees from config"
          else
            echo "✅ 没有变更需要提交"
          fi

      - name: Push changes using PAT
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.PAT }}@github.com/${{ github.repository }}
          if [ -n "$(git log origin/main..HEAD)" ]; then
            git push origin main
          else
            echo "📭 没有需要推送的变更"
          fi
          
      - name: Generate pretty README from synced projects
        run: |
          echo "# 📦 Synced Projects" > README.md
          echo "" >> README.md
          echo "通过 \`projects.json\` 自动同步的子项目如下表所示：" >> README.md
          echo "" >> README.md
          echo "| 项目名称 | 分支 | 仓库地址 | 启用状态 |" >> README.md
          echo "|----------|------|-----------|----------|" >> README.md
          
          jq -c '.[]' projects.json | while read -r project; do
            name=$(echo "$project" | jq -r '.name')
            repo=$(echo "$project" | jq -r '.repo')
            branch=$(echo "$project" | jq -r '.branch // "master"')
            enabled=$(echo "$project" | jq -r '.enabled')
            status="❌"
            if [[ "$enabled" == "true" ]]; then
              status="✅"
            fi
            echo "| **$name** | \`$branch\` | [GitHub]($repo) | $status |" >> README.md
          done

          echo "" >> README.md
          echo "> ⏱️ 更新时间：$(date -u '+%Y-%m-%d %H:%M UTC')（由 GitHub Actions 自动生成）" >> README.md

      - name: Commit README if changed
        run: |
          if [ -n "$(git status --porcelain README.md)" ]; then
            git add README.md
            git commit -m "📘 更新自动生成的 README.md"

            echo "📥 拉取远程更新以避免冲突"
            git pull --rebase origin main

            echo "🚀 推送更改到远程"
            git push origin main
          else
            echo "🆗 README 无需更新"
          fi

